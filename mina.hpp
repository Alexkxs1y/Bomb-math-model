#ifndef OTR_H
#define OTR_H
#include <iostream>
#include <math.h>
#include "4401-81.hpp"
#include "adch.hpp"
#include <vector>
using namespace std;

class otr{
public:

	otr(); // Конструктор класса

	void init(double &_m, vector<double> &_J, double &_d, double &_l, double &_li, double &_tEng, double &_engThrust, double &_t, double &_t_last, vector<double> &_stateVectorG, 
				vector<double> &_angles, vector<double> &_speedAngles, vector<double> &_angleSpeed, vector<double> &_targetPosition,
				ADCH &_adch, GHOST4401 &_atm, bool corr); // Ввод начальных условий.

	void update(double &dt, int &i); // Шаг по времени в системе
	vector<double> get_res(double &dt, int& i); // Интегрирование с конечным ответом



	/////////////////////////////////////////////////////////////////////////
	//							Атмосфера и АДХ							   //
	/////////////////////////////////////////////////////////////////////////

	GHOST4401 atm;
	ADCH adch;

	/////////////////////////////////////////////////////////////////////////
	//							Параметры ЛА							   //
	/////////////////////////////////////////////////////////////////////////

	double m; // Масса ЛА
	vector<double> J; // vector(3) Момент инерции мины относительно связанных осей (Jx, Jy, Jz)
	double d; // Диаметр Миделя
	double l; // Длина ЛА
	double li; // Расстояние от цм до начала ИСК
	double tEng; // Время работы двигателей
	int workEngNumber; // -1 никакой не работает, далее от 0-9 включительно номера двигателя, если они работают. 
	vector<int> engNumber; // vector(10) порядковый номер показывает область, за которую ответсвеннен двигатель, значение 0 - не работал, -1 - работал.
	double engThrust; // Тяга двигателей в Ньютонах.
	double t; // Текущее время.
	double t_last; // Время вклчение последнего двигателя
	bool corr; //полет с корректировкой или без


	/////////////////////////////////////////////////////////////////////////
	//							Состояние ЛА							   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> stateVectorG; // vector(6) Координаты и скорости в НСК (x_g, y_g, z_g, V_xg, V_yg, V_zg)
	vector<double> angleVector; // vector(6) (gamma, psi, tetta, d_gamma, d_psi, d_tetta)
	vector<double> d_stateVectorG; // vector(6) Скорости и ускорения в НСК (V_xg, V_yg, V_zg, a_xg, a_yg, a_xg)
	vector<double> orientationVector; // vector(7) Параметры Родриго-Гамильтона и угловые скорости(ro, lambda, mu, nu, w_x, w_y, w_z)
	vector<double> d_orientationVector; // vector(7) Производные параметров Родриго-Гамильтона и угловые ускорения(d_ro, d_lambda, d_mu, d_nu, d_w_x, d_w_y, d_w_z)
	vector<double> speedAngles; // vector(2) Угол атаки и скольжения (alpha, betta)
	vector<double> bg; // vector(3) вектор от центра ИСК до цели в НСК
	vector<double> bi; // vector(3) вектор от центра ИСК до цели в ИСК
	vector<double> Sg; // vector(3) вектор от начала СCК до начала ИСК в НСК
	vector<double> Rg; // vector(3) вектор цели в НСК (он постоянен)
	vector<double> phi_i; //vector(2) вектор углов цели в ИСК (ksi_i, chi_i);


	/////////////////////////////////////////////////////////////////////////
	//							Силы и моменты							   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> g; // vector(3) Ускорение свободного падения (g_x, g_y, g_z) = (0, 0, g)
	vector<double> aeroForces; // vector(3) Аэродинамические силы в скоростной СК (X, Y, Z)
	vector<double> aeroForces_G; // vector(3) Аэродинамические силы в НСК (X, Y, Z)
	vector<double> aeroTorque; // vector(3) Аэродинамические моменты сил (Mx, My, Mz)
	vector<double> thrustForce; // vector(3) Тяга в связной СК.


	/////////////////////////////////////////////////////////////////////////
	//					Дополнительные характеристики ЛА				   //
	/////////////////////////////////////////////////////////////////////////

	double Vref; // Относительная скорость потока
	double M; // Число Маха
	double q; // Скоростной напор
	double qs; // Коэффициент при ад силах
	double qsl; // Коэффициент про ад моментах


	/////////////////////////////////////////////////////////////////////////
	//				Определение углов и угловых скоростей				   //
	/////////////////////////////////////////////////////////////////////////

	void init_angleVector(); // Подсчёт углов Эйлера из параметров Родриго-Гамильтона
	void init_speedAngles(); // Подсчёт угла атаки и скольжения.


	/////////////////////////////////////////////////////////////////////////
	//				Подсчёт доп. характеристик ЛА						   //
	/////////////////////////////////////////////////////////////////////////

	void init_extra_params(); // Инициализация дополнительных характеристик ЛА


	/////////////////////////////////////////////////////////////////////////
	//					Поиск углов цели на визоре						   //
	/////////////////////////////////////////////////////////////////////////

	void init_b(); // Инициализация вектора цели в НСК и ИСК
	void init_phi_i(); // Инициализация углов цели в НСК и ИСК


	/////////////////////////////////////////////////////////////////////////
	//						Подсчёт сил и моментов						   //
	/////////////////////////////////////////////////////////////////////////

	void init_g(); // Инициализация силы тяжести
	void init_aeroForces(); // Инициализация ад сил
	void init_aeroForces_G(); // Пересчет АД сил из связанной СК в НСК
	void init_aeroTorque(); // Подсчёт АД моментов
	void init_forceAndTorque(); // Прогон всех функций подсчета сил и моментов без управления
	void init_thrustForce(); // Сила тяги двигателя


	/////////////////////////////////////////////////////////////////////////
	//	Подсчёт производных состояния ЛА, также определение углов 		   //	  
	/////////////////////////////////////////////////////////////////////////

	void calc_d_stateVectorG(); // Инициализация скоростей и подсчет ускорений в НСК
	void calc_d_orientationVector(); // Подсчет производных параметров Родриго-Гамильтона и угловых скоростей
	void calc_d_dt(); // Прогон всех функций производных


	/////////////////////////////////////////////////////////////////////////
	//							Интегрирование						  	   //
	/////////////////////////////////////////////////////////////////////////

	void integ_stateVectorG(double &dt); // Подсчёт нового положения ЛА
	void integ_orientationVector(double &dt); // Подсчёт нового вектора ориентации
	void integrate(double &dt); // Интегрирование нового положения


	/////////////////////////////////////////////////////////////////////////
	//								Доп  								   //
	/////////////////////////////////////////////////////////////////////////

	void first_init_RodGam(); // Первая инициализация параметров Родрига-Гамильтона через углу ориентации.


	/////////////////////////////////////////////////////////////////////////
	//						Глобальные функции							   //  
	/////////////////////////////////////////////////////////////////////////

	void init_step_params(); // Подсчёт параметров на новом шаге

};

#endif